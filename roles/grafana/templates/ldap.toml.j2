# To troubleshoot and get more log info enable ldap debug logging in grafana.ini
# [log]
# filters = ldap:debug

[[servers]]
# Ldap server host (specify multiple hosts space separated)
host = "{{grafana_ldap_hosts|join(' ')}}"
# Default port is 389 or 636 if use_ssl = true
port = 636
# Set to true if ldap server supports TLS
use_ssl = true
# Set to true if connect ldap server with STARTTLS pattern (create connection in insecure, then upgrade to secure connection with TLS)
start_tls = false
# set to true if you want to skip ssl cert validation
ssl_skip_verify = true
# set to the path to your root CA certificate or leave unset to use system defaults
# root_ca_cert = /path/to/certificate.crt

# Search user bind dn
bind_dn = '{{ grafana_ldap_bind_user }}'
# Search user bind password
# If the password contains # or ; you have to wrap it with trippel quotes. Ex """#password;"""
{% if not grafana_ldap_is_ad %}
bind_password = """{{ grafana_ldap_bind_password }}"""
{% endif %}

# User search filter, for example "(cn=%s)" or "(sAMAccountName=%s)" or "(uid=%s)"
search_filter = "{{ grafana_ldap_user_filter }}"

# An array of base dns to search through
search_base_dns = ["{{ grafana_ldap_user_basedn }}"]

# In POSIX LDAP schemas, without memberOf attribute a secondary query must be made for groups.
# This is done by enabling group_search_filter below. You must also set member_of= "cn"
# in [servers.attributes] below.

# Users with nested/recursive group membership and an LDAP server that supports LDAP_MATCHING_RULE_IN_CHAIN
# can set group_search_filter, group_search_filter_user_attribute, group_search_base_dns and member_of
# below in such a way that the user's recursive group membership is considered.
#
# Nested Groups + Active Directory (AD) Example:
#
#   AD groups store the Distinguished Names (DNs) of members, so your filter must
#   recursively search your groups for the authenticating user's DN. For example:
#
#group_search_filter = "(member:1.2.840.113556.1.4.1941:=%s)"
{% if not grafana_ldap_is_ad %}
group_search_filter_user_attribute = "uid"
group_search_base_dns = ["{{ grafana_ldap_group_basedn }}"]
group_search_filter = "{{ grafana_ldap_group_filter }}"
#
#[servers.attributes]
#     ...
#member_of = "distinguishedName"

## Group search filter, to retrieve the groups of which the user is a member (only set if memberOf attribute is not available)
# group_search_filter = "(&(objectClass=posixGroup)(memberUid=%s))"
## Group search filter user attribute defines what user attribute gets substituted for %s in group_search_filter.
## Defaults to the value of username in [server.attributes]
## Valid options are any of your values in [servers.attributes]
## If you are using nested groups you probably want to set this and member_of in
## [servers.attributes] to "distinguishedName"
# group_search_filter_user_attribute = "distinguishedName"
## An array of the base DNs to search through for groups. Typically uses ou=groups
# group_search_base_dns = ["ou=groups,dc=grafana,dc=org"]
{% endif %}

# Specify names of the ldap attributes your ldap uses
[servers.attributes]
name = "givenName"
surname = "sn"
username = "{{ grafana_ldap_username }}"
member_of = "{{ grafana_ldap_memberof }}"
email =  "mail"

{% for item in grafana_group_mappings %}
[[servers.group_mappings]]
{% if not grafana_ldap_is_ad %}
group_dn = "{{ item.name }}"
{% else %}
group_dn = "{{ item.dn }}"
{% endif %}
org_role = "{{ item.role }}"
{% if item.role == "Admin" %}
grafana_admin = true
{% endif %}
{% endfor %}

#[[servers.group_mappings]]
# If you want to match all (or no ldap groups) then you can use wildcard
#group_dn = "*"
#org_role = "Viewer"
